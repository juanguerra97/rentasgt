
DROP DATABASE IF EXISTS rentasgt;

CREATE DATABASE rentasgt;

USE rentasgt;

DROP USER IF EXISTS rentasgt;

CREATE USER 'rentasgt'@'%' IDENTIFIED BY 'rentasgt';

GRANT ALL PRIVILEGES ON rentasgt.* TO 'rentasgt'@'%';

DROP FUNCTION IF EXISTS calculateDistance;

DELIMITER //
CREATE FUNCTION calculateDistance(
	aLat DOUBLE, aLon DOUBLE, bLat DOUBLE, bLon DOUBLE )
RETURNS DOUBLE 
BEGIN
	RETURN 111.111 *
		DEGREES(ACOS(LEAST(1.0, COS(RADIANS(aLat))
         * COS(RADIANS(bLat))
         * COS(RADIANS(aLon - bLon))
         + SIN(RADIANS(aLat))
         * SIN(RADIANS(bLat)))));
END//
DELIMITER ;

DROP FUNCTION IF EXISTS isYear;

DELIMITER //
CREATE FUNCTION isYear(aDate DATETIME, aYear YEAR)
RETURNS BOOLEAN 
BEGIN
	RETURN EXTRACT(YEAR FROM aDate) = aYear;
END//
DELIMITER ;

DROP FUNCTION IF EXISTS isMonth;

DELIMITER //
CREATE FUNCTION isMonth(aDate DATETIME, aMonth DATETIME)
RETURNS BOOLEAN
BEGIN
	RETURN EXTRACT(YEAR_MONTH FROM aDate) = EXTRACT(YEAR_MONTH FROM aMonth);
END//
DELIMITER ;

DROP FUNCTION IF EXISTS isEqualDate;

DELIMITER //
CREATE FUNCTION isEqualDate(d1 DATETIME, d2 DATETIME)
RETURNS BOOLEAN
BEGIN
	RETURN DATE(d1) = DATE(d2);
END//
DELIMITER ;

DROP FUNCTION IF EXISTS extractYear;
DELIMITER //
CREATE FUNCTION extractYear(d DATETIME)
RETURNS INT
BEGIN
	RETURN EXTRACT(YEAR FROM d);
END//
DELIMITER ;

DROP FUNCTION IF EXISTS extractMonth;
DELIMITER //
CREATE FUNCTION extractMonth(d DATETIME)
RETURNS INT
BEGIN
	RETURN EXTRACT(MONTH FROM d);
END//
DELIMITER ;

DROP FUNCTION IF EXISTS extractDay;
DELIMITER //
CREATE FUNCTION extractDay(d DATETIME)
RETURNS INT
BEGIN
	RETURN EXTRACT(DAY FROM d);
END//
